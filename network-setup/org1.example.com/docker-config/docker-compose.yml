
version: '2'

networks:
    poc:

services:

    zookeeper0:
        extends:
            file: docker-compose-base.yml
            service: zookeeper
        container_name: zookeeper0
        environment:
            - ZOO_MY_ID=1
            - ZOO_SERVERS=server.1=zookeeper0:2888:3888
        networks:
          poc:
             aliases:
               - ${CORE_PEER_NETWORKID}

    # zookeeper1:
    #     extends:
    #         file: docker-compose-base.yml
    #         service: zookeeper
    #     container_name: zookeeper1
    #     environment:
    #         - ZOO_MY_ID=2
    #         - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 
    #     networks:
    #       poc:
    #          aliases:
    #            - ${CORE_PEER_NETWORKID}

    # zookeeper2:
    #     extends:
    #         file: docker-compose-base.yml
    #         service: zookeeper
    #     container_name: zookeeper2
    #     environment:
    #         - ZOO_MY_ID=3
    #         - ZOO_SERVERS=server.1=zookeeper0:2888:3888 server.2=zookeeper1:2888:3888 server.3=zookeeper2:2888:3888
    #     networks:
    #       poc:
    #          aliases:
    #            - ${CORE_PEER_NETWORKID}

    kafka0:
        extends:
            file: docker-compose-base.yml
            service: kafka
        container_name: kafka0
        environment:
            - KAFKA_BROKER_ID=0
            - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181
            - KAFKA_MESSAGE_MAX_BYTES=${KAFKA_MESSAGE_MAX_BYTES}
            - KAFKA_REPLICA_FETCH_MAX_BYTES=${KAFKA_REPLICA_FETCH_MAX_BYTES}
            - KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES=${KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES}
        depends_on:
            - zookeeper0
            # - zookeeper1
            # - zookeeper2
        networks:
          poc:
             aliases:
               - ${CORE_PEER_NETWORKID}

    kafka1:
        extends:
            file: docker-compose-base.yml
            service: kafka
        container_name: kafka1
        environment:
            - KAFKA_BROKER_ID=1
            - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181
            - KAFKA_MESSAGE_MAX_BYTES=${KAFKA_MESSAGE_MAX_BYTES}
            - KAFKA_REPLICA_FETCH_MAX_BYTES=${KAFKA_REPLICA_FETCH_MAX_BYTES}
            - KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES=${KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES}
        depends_on:
            - zookeeper0
            # - zookeeper1
            # - zookeeper2
        networks:
          poc:
             aliases:
               - ${CORE_PEER_NETWORKID}

    # kafka2:
    #     extends:
    #         file: docker-compose-base.yml
    #         service: kafka
    #     container_name: kafka2
    #     environment:
    #         - KAFKA_BROKER_ID=2
    #         - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181
    #         - KAFKA_MESSAGE_MAX_BYTES=${KAFKA_MESSAGE_MAX_BYTES}
    #         - KAFKA_REPLICA_FETCH_MAX_BYTES=${KAFKA_REPLICA_FETCH_MAX_BYTES}
    #         - KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES=${KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES}
    #     depends_on:
    #         - zookeeper0
    #         - zookeeper1
    #         # - zookeeper2
    #     networks:
    #       poc:
    #          aliases:
    #            - ${CORE_PEER_NETWORKID}

    # kafka3:
    #     extends:
    #         file: docker-compose-base.yml
    #         service: kafka
    #     container_name: kafka3
    #     environment:
    #         - KAFKA_BROKER_ID=3
    #         - KAFKA_ZOOKEEPER_CONNECT=zookeeper0:2181,zookeeper1:2181,zookeeper2:2181
    #         - KAFKA_MESSAGE_MAX_BYTES=${KAFKA_MESSAGE_MAX_BYTES}
    #         - KAFKA_REPLICA_FETCH_MAX_BYTES=${KAFKA_REPLICA_FETCH_MAX_BYTES}
    #         - KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES=${KAFKA_REPLICA_FETCH_RESPONSE_MAX_BYTES}
    #     depends_on:
    #         - zookeeper0
    #         - zookeeper1
    #         - zookeeper2
    #     networks:
    #       poc:
    #          aliases:
    #            - ${CORE_PEER_NETWORKID}

    orderer0.example.com:
        extends:
            file: docker-compose-base.yml
            service: orderer
        container_name: orderer0.example.com
        environment:
            - ORDERER_HOST=orderer0.example.com
            - CONFIGTX_ORDERER_ORDERERTYPE=kafka
            - CONFIGTX_ORDERER_KAFKA_BROKERS=[kafka0:9092,kafka1:9092]
            - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
            - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
            - ORDERER_KAFKA_VERBOSE=true
            - ORDERER_ABSOLUTEMAXBYTES=${ORDERER_ABSOLUTEMAXBYTES}
            - ORDERER_PREFERREDMAXBYTES=${ORDERER_PREFERREDMAXBYTES}
        volumes:
            - ../crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/msp:/var/hyperledger/msp
            - ../crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/tls:/var/hyperledger/tls
            - ../channel-artifacts/:/var/hyperledger/configs
        depends_on:
            - kafka0
            - kafka1
            # - kafka2
            # - kafka3
        networks:
          poc:
             aliases:
               - ${CORE_PEER_NETWORKID}
        ports:
          - 7050:7050

    orderer1.example.com:
        extends:
            file: docker-compose-base.yml
            service: orderer
        container_name: orderer1.example.com
        environment:
            - ORDERER_HOST=orderer1.example.com
            - CONFIGTX_ORDERER_ORDERERTYPE=kafka
            - CONFIGTX_ORDERER_KAFKA_BROKERS=[kafka0:9092,kafka1:9092]
            - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
            - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
            - ORDERER_KAFKA_RETRY_LONGINTERVAL=30s
            - ORDERER_KAFKA_RETRY_LONGTOTAL=5m
            - ORDERER_KAFKA_VERBOSE=true
            - ORDERER_ABSOLUTEMAXBYTES=${ORDERER_ABSOLUTEMAXBYTES}
            - ORDERER_PREFERREDMAXBYTES=${ORDERER_PREFERREDMAXBYTES}
        volumes:
            - ../crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/msp:/var/hyperledger/msp
            - ../crypto-config/ordererOrganizations/example.com/orderers/orderer1.example.com/tls:/var/hyperledger/tls
            - ../channel-artifacts/:/var/hyperledger/configs
        depends_on:
            - kafka0
            - kafka1
            # - kafka2
            # - kafka3
        networks:
          poc:
             aliases:
               - ${CORE_PEER_NETWORKID}
        ports:
          - 8050:7050

    # orderer2.example.com:
    #     extends:
    #         file: docker-compose-base.yml
    #         service: orderer
    #     container_name: orderer2.example.com
    #     environment:
    #         - ORDERER_HOST=orderer2.example.com
    #         - CONFIGTX_ORDERER_ORDERERTYPE=kafka
    #         - CONFIGTX_ORDERER_KAFKA_BROKERS=[kafka0:9092,kafka1:9092,kafka2:9092,kafka3:9092]
    #         - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
    #         - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
    #         - ORDERER_KAFKA_VERBOSE=true
    #         - ORDERER_ABSOLUTEMAXBYTES=${ORDERER_ABSOLUTEMAXBYTES}
    #         - ORDERER_PREFERREDMAXBYTES=${ORDERER_PREFERREDMAXBYTES}
    #     volumes:
    #         - ../crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/msp:/var/hyperledger/msp
    #         - ../crypto-config/ordererOrganizations/example.com/orderers/orderer2.example.com/tls:/var/hyperledger/tls
    #         - ../channel-artifacts/:/var/hyperledger/configs
    #     depends_on:
    #         - kafka0
    #         - kafka1
    #         - kafka2
    #         - kafka3
    #     networks:
    #       poc:
    #          aliases:
    #            - ${CORE_PEER_NETWORKID}
    #     ports:
    #       - 9050:7050

    couch.peer0.org1.example.com:
        extends:
            file: docker-compose-base.yml
            service: couchdb
        container_name: couch.peer0.org1.example.com
        # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,
        # for example map it to utilize Fauxton User Interface in dev environments.
        ports:
          - "5984:5984"
        networks:
          poc:
             aliases:
               - ${CORE_PEER_NETWORKID}

    couch.peer1.org1.example.com:
        extends:
            file: docker-compose-base.yml
            service: couchdb
        container_name: couch.peer1.org1.example.com
        # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service,
        # for example map it to utilize Fauxton User Interface in dev environments.
        ports:
          - "6984:5984"
        networks:
          poc:
             aliases:
               - ${CORE_PEER_NETWORKID}

    peer0.org1.example.com:
        extends:
            file: docker-compose-base.yml
            service: peer
        container_name: peer0.org1.example.com
        environment:
            - CORE_PEER_CHAINCODELISTENADDRESS=peer0.org1.example.com:7052
            - CORE_PEER_ID=peer0.org1.example.com
            - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
            - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.org1.example.com:7051
            - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051
            # - CORE_PEER_GOSSIP_ORGLEADER=${CORE_PEER_GOSSIP_ORGLEADER_PEER0}
            # - CORE_PEER_GOSSIP_USELEADERELECTION=${CORE_PEER_GOSSIP_USELEADERELECTION_PEER0}
            - CORE_PEER_LOCALMSPID=Org1MSP
            - CORE_PEER_TLS_CLIENTROOTCAS_FILES=/var/hyperledger/users/Admin@org1.example.com/tls/ca.crt
            - CORE_PEER_TLS_CLIENTCERT_FILE=/var/hyperledger/users/Admin@org1.example.com/tls/client.crt
            - CORE_PEER_TLS_CLIENTKEY_FILE=/var/hyperledger/users/Admin@org1.example.com/tls/client.key
            - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
            - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couch.peer0.org1.example.com:5984
        volumes:
            - ../crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/var/hyperledger/msp
            - ../crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls:/var/hyperledger/tls
            - ../crypto-config/peerOrganizations/org1.example.com/tlsca:/var/hyperledger/tlsca
            - ../crypto-config/peerOrganizations/org1.example.com/users:/var/hyperledger/users
        depends_on:
            - orderer0.example.com
            - orderer1.example.com
            # - orderer2.example.com
            - couch.peer0.org1.example.com
        networks:
          poc:
             aliases:
               - ${CORE_PEER_NETWORKID}
        ports:
          - 7051:7051
          - 7053:7053

    peer1.org1.example.com:
        extends:
            file: docker-compose-base.yml
            service: peer
        container_name: peer1.org1.example.com
        environment:
            - CORE_PEER_CHAINCODELISTENADDRESS=peer1.org1.example.com:7052
            - CORE_PEER_ID=peer1.org1.example.com
            - CORE_PEER_ADDRESS=peer1.org1.example.com:7051
            - CORE_PEER_GOSSIP_BOOTSTRAP=peer0.org1.example.com:7051
            - CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1.org1.example.com:7051
            # - CORE_PEER_GOSSIP_ORGLEADER=${CORE_PEER_GOSSIP_ORGLEADER_PEER1}
            # - CORE_PEER_GOSSIP_USELEADERELECTION=${CORE_PEER_GOSSIP_USELEADERELECTION_PEER1}
            - CORE_PEER_LOCALMSPID=Org1MSP
            - CORE_PEER_TLS_CLIENTROOTCAS_FILES=/var/hyperledger/users/Admin@org1.example.com/tls/ca.crt
            - CORE_PEER_TLS_CLIENTCERT_FILE=/var/hyperledger/users/Admin@org1.example.com/tls/client.crt
            - CORE_PEER_TLS_CLIENTKEY_FILE=/var/hyperledger/users/Admin@org1.example.com/tls/client.key
            - CORE_LEDGER_STATE_STATEDATABASE=CouchDB
            - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couch.peer1.org1.example.com:5984
        volumes:
            - ../crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp:/var/hyperledger/msp
            - ../crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls:/var/hyperledger/tls
            - ../crypto-config/peerOrganizations/org1.example.com/tlsca:/var/hyperledger/tlsca
            - ../crypto-config/peerOrganizations/org1.example.com/users:/var/hyperledger/users
        depends_on:
            - orderer0.example.com
            - orderer1.example.com
            # - orderer2.example.com
            - peer0.org1.example.com
            - couch.peer1.org1.example.com
        networks:
          poc:
             aliases:
               - ${CORE_PEER_NETWORKID}
        ports:
          - 8051:7051
          - 8053:7053

    cli.org1.example.com:
        container_name: cli.org1.example.com
        image: hyperledger/fabric-tools:${FABRIC_VERSION}
        tty: true
        environment:
        - GOPATH=/opt/gopath
        - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
        - CORE_LOGGING_LEVEL=${CORE_LOGGING_LEVEL}
        - CORE_PEER_ID=cli
        - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
        - CORE_PEER_LOCALMSPID=Org1MSP
        - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp
        - CORE_CHAINCODE_KEEPALIVE=10
        - CORE_PEER_TLS_ENABLED=${CORE_PEER_TLS_ENABLED}
        - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/tlsca/tlsca.org1.example.com-cert.pem
        - ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/tlsca/tlsca.example.com-cert.pem
        working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
        command: /bin/bash
        volumes:
            - /var/run/:/host/var/run/
            - ../../../chaincode/:/opt/gopath/src/github.com/chaincode
            - $GOPATH/src/github.com/hyperledger/fabric/:/opt/gopath/src/github.com/hyperledger/fabric/
            - ../crypto-config/peerOrganizations/:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/
            - ../../orderer-certs/ordererOrganizations/:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/
            - ../../scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
            - ../channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts
            - ../../org-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/org-artifacts
        depends_on:
        - orderer0.example.com
        - orderer1.example.com
        # - orderer2.example.com
        - peer0.org1.example.com
        - peer1.org1.example.com
        networks:
            poc:
                aliases:
                - ${CORE_PEER_NETWORKID}
